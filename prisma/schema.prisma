generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    url      = env("DATABASE_URL")
}

model User {
    id                 String    @id @default(cuid())
    name               String
    email              String    @unique
    role               Role      @default(STUDENT)
    phoneNo            String?
    rollNo             String?
    image              String?
    password           String
    createdAt          DateTime  @default(now())
    lastPasswordChange DateTime  @default(now())
    isActive           Boolean   @default(true)
    Student            Student[]
    Staff              Staff[]
}

enum Role {
    STUDENT
    STAFF
    ADMIN
}

model Class {
    id         String    @id @default(cuid())
    name       String
    department String
    semester   String
    batch      String
    students   Student[]
    courses    Course[]
    sharePoint String
}

model Student {
    id         String       @id @default(cuid())
    user       User         @relation(fields: [userId], references: [id])
    userId     String
    class      Class?       @relation(fields: [classId], references: [id])
    classId    String?
    QuizResult QuizResult[]
}

model Course {
    id         String  @id @default(cuid())
    name       String
    code       String
    class      Class   @relation(fields: [classId], references: [id])
    classId    String
    staff      Staff?  @relation(fields: [staffId], references: [id])
    staffId    String?
    quizzes    Quiz[]
    semesterId String?
    isactive   Boolean @default(true)
    sharePoint String
}

model Topic {
    id   String @id @default(cuid())
    name String
}

model Bank {
    id          String   @id @default(cuid())
    name        String
    createdAt   DateTime
    description String?
    semester    String?

    topics String[]

    bankOwners Staff[] @relation("BankOwners")
    staffs     Staff[] @relation("BankStaffs")
}

model Staff {
    id         String   @id @default(cuid())
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    bank       Bank[]   @relation("BankOwners")
    bankStaffs Bank[]   @relation("BankStaffs")
    courses    Course[]
    Quiz       Quiz[]
}

model Quiz {
    id          String   @id @default(cuid())
    title       String
    description String?
    startTime   DateTime
    endTime     DateTime
    duration    Int
    createdbyId String
    createdby   Staff    @relation(fields: [createdbyId], references: [id])

    settings   QuizSettings @relation(fields: [settingsId], references: [id])
    settingsId String
    results    QuizResult[]
    courses    Course[]
    QuizReport QuizReport[]
}

model QuizSettings {
    id         String  @id @default(cuid())
    fullscreen Boolean @default(false)
    calculator Boolean @default(false)
    shuffle    Boolean @default(false)
    showResult Boolean @default(false)
    Quiz       Quiz[]
}

model QuizResult {
    id            String   @id @default(cuid())
    student       Student  @relation(fields: [studentId], references: [id])
    studentId     String
    quiz          Quiz     @relation(fields: [quizId], references: [id])
    quizId        String
    score         Float
    totalScore    Float    @default(0)
    remarks       Json?
    submittedAt   DateTime @default(now())
    responses     Json
    questionMarks Json?
    violations    String?
}

model QuizReport {
    id     String @id @default(cuid())
    quiz   Quiz   @relation(fields: [quizId], references: [id])
    quizId String @unique

    maxScore         Float
    avgScore         Float
    minScore         Float
    totalScore       Float
    totalStudents    Int
    questionStats    Json
    markDistribution Json
}
